// QTL-based model: null model (no fitness function)
// Valeria AÃ±orve-Garibay
// SLiM version 
// No scaling factor

initialize() {
	
	defineConstant("hsq", 0.5);
	
	initializeMutationRate(1e-08);
	
	// neutral mutations
	initializeMutationType("m1", 0.5, "f", 0.0);
	
	// QTLs
	initializeMutationType("m2", 0.5, "n", 0.0, 0.25);
	m2.convertToSubstitution == F;
	
	//initializeGenomicElementType("g1", c(m2), c(1));
	initializeGenomicElementType("g1", c(m1, m2), c(1, 0.1));
	
	// exons aka 20 independent regions
	rec_ends = NULL;
	rec_rates = NULL;
	for (index in 1:20){
		initializeGenomicElement(g1, (index - 1 )*25000 + 2, (index - 1 )*25000 + 24999 + 2);
		rec_ends = c( rec_ends, (index - 1)*25000 + 2);
		rec_ends = c( rec_ends, (index - 1)*25000 + 24999 + 2);
		rec_rates = c( rec_rates, 0.5);
		rec_rates = c( rec_rates, 1e-08*1);
	}
	initializeRecombinationRate(rec_rates, rec_ends);
}

mutationEffect(m2) { return 1.0; } // this fitness(m2) call tells SLiM to ignore the selection coefficients of m2 mutations a

// burn-in for ancestral population
1 early() {
    	// save this run's identifier, used to save and restore
    	defineConstant("simID", getSeed());
	sim.addSubpop("p1", 10000); }
// end of burn-in

// calculation of phenotypic trait values and fitness effects
1:100400 late() {
  inds = sample(sim.subpopulations.individuals, 100);
	additive = inds.sumOfMutationsOfType(m2);
	V_A = sd(additive)^2;
	V_E=(V_A-hsq*V_A)/hsq;
	env = rnorm(size(inds), 0.0, sqrt(V_E));
	pheno = additive + env;
	estimated_hsq = var(additive) / var(pheno);
	// neutral evolution
	inds.fitnessScaling = 1;
	if(sim.cycle == 100000 | sim.cycle == 100100 | sim.cycle == 100200 | sim.cycle == 100300 | sim.cycle == 100400)
	{	
		catn("Generation: " + sim.cycle + "\n");
		catn("Mean phenotype: " + mean(pheno) + "\n");
		catn("Estimated hsq: " + estimated_hsq + "\n");
		cat("\n\n-------------------------------\n");

		QTLs = sim.mutationsOfType(m2);
		sim.outputMutations(QTLs, "/mnt/Timina/dortega/vanorve/ancient-pheno-pred/output/neutral/QTLs_" + asString(sim.cycle) + "_" + nrun + ".txt");
		writeFile("/mnt/Timina/dortega/vanorve/ancient-pheno-pred/output/neutral/tpheno_" + asString(sim.cycle) + "_" + nrun + ".txt", asString(pheno));
		inds.genomes.outputVCF("/mnt/Timina/dortega/vanorve/ancient-pheno-pred/output/neutral/outVCF_" + asString(sim.cycle) + "_" + nrun + ".vcf", simplifyNucleotides=T);
	}
}
