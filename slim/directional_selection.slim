// QTL-based model assuming directional selection
// Valeria AÃ±orve-Garibay
// SLiM version 4.1
// No scaling factor

initialize() {
	
	initializeMutationRate(1e-08);
	
	//defineConstant("path", "/mnt/Timina/dortega/vanorve/ancient-pheno-pred/output/directional/total/025/");
	//defineConstant("path", "/mnt/Timina/dortega/vanorve/ancient-pheno-pred/output/stabilizing/total/0025/");
	//defineConstant("path", "/mnt/Timina/dortega/vanorve/ancient-pheno-pred/output/stabilizing/total/00025/");
	//defineConstant("path", "/mnt/Timina/dortega/vanorve/ancient-pheno-pred/output/stabilizing/total/000025/");
	
 	// VS: the sum of the variance in fitness plus the environmental variance in phenotype
	defineConstant("VS", 1.0);

	catn("Directional selection: " + "hsq = " + hsq + " VS = " + VS + "\n");
		
	// QTLs
	initializeMutationType("m1", 0.5, "f", 0.0); // neutral
	initializeMutationType("m2", 0.5, "n", 0.0, QTLs_sd); // QTL
	m2.convertToSubstitution == F;
	
	initializeGenomicElementType("g1", c(m2), c(1));
	
	// exons aka 20 independent genes
	rec_ends = NULL;
	rec_rates = NULL;
	for (index in 1:20){
		initializeGenomicElement(g1, (index - 1 )*25000 + 2, (index - 1 )*25000 + 24999 + 2);
		rec_ends = c( rec_ends, (index - 1)*25000 + 2);
		rec_ends = c( rec_ends, (index - 1)*25000 + 24999 + 2);
		rec_rates = c( rec_rates, 0.5);
		rec_rates = c( rec_rates, 1e-08*1);
	}
	initializeRecombinationRate(rec_rates, rec_ends);
}

// burn-in for ancestral population
1 late(){
	// save this run's identifier, used to save and restore
	defineConstant("simID", getSeed());
	sim.addSubpop("p1", 10000); }

1: late() {

	inds = sim.subpopulations.individuals;
	additive = inds.sumOfMutationsOfType(m2);
	// H2 = VA / VA + VE
	V_A = sd(additive)^2;
	V_E=(V_A-hsq*V_A)/hsq;
	env = rnorm(size(inds), 0.0, sqrt(V_E));
	pheno = additive + env;
	estimated_hsq = var(additive) / var(pheno);
	
	// during the burn-in period, trait will be under stabilizing selection at a zero optimum
	// rigth after the burn-in (10N), there is an optimum shift that pushes the effect sizes distribution towards the new optimum (directional selection)
	if(sim.cycle == 100000){
		// stabilizing selection
		// based on w fitness equation defined by Kevin R. Thornton., 2019 and based on Burger (2000)
		inds.fitnessScaling = exp(-(((pheno - 0.0)^(2)) / (2)*(VS)));
	}	

	if(sim.cycle == 100000){
		// stabilizing selection
		// based on w fitness equation defined by Kevin R. Thornton., 2019 and based on Burger (2000)
		inds.fitnessScaling = exp(-(((pheno - 1.0)^(2)) / (2)*(VS)));
	}

	if(sim.cycle == 100000 | sim.cycle == 100100 | sim.cycle == 100200 | sim.cycle == 100300 | sim.cycle == 100400)
	{
		catn(sim.cycle + ": mean pheno == " + mean(pheno) + ", hsq == " + estimated_hsq);
	}

	inds.tagF = phenotypes;
	
	if (sim.generation % 1 == 0)
		catn(sim.generation + "  " + mean(phenotypes) + "    " + heritability + "    " + VS);
}

// burn-in for ancestral population
1 early(){
	setSeed(c(5572656811440));
	sim.addSubpop("p1", 10000); }


100000 late() {
	all_inds = sim.subpopulations.individuals;
	sample_inds = sample(all_inds, 100);
	phenotypes = sample_inds.tagF;
	writeFile("/mnt/Timina/dortega/vanorve/cluster/ordenado/scripts/directional/1/varNor/phenotypesFile_directional_h08_opt1_varNor_simulation_num_1_1" + ".txt", asString(phenotypes));
	sample_inds.genomes.outputVCF("/mnt/Timina/dortega/vanorve/cluster/ordenado/scripts/directional/1/varNor/vcfOutput_directional_h08_opt1_varNor_simulation_num_1_1" + ".txt", simplifyNucleotides=T);
}


100100 late() {
	all_inds = sim.subpopulations.individuals;
	sample_inds = sample(all_inds, 100);
	phenotypes = sample_inds.tagF;
	writeFile("/mnt/Timina/dortega/vanorve/cluster/ordenado/scripts/directional/1/varNor/phenotypesFile_directional_h08_opt1_varNor_simulation_num_1_2" + ".txt", asString(phenotypes));
	sample_inds.genomes.outputVCF("/mnt/Timina/dortega/vanorve/cluster/ordenado/scripts/directional/1/varNor/vcfOutput_directional_h08_opt1_varNor_simulation_num_1_2" + ".txt", simplifyNucleotides=T);
}


100200 late() {
	all_inds = sim.subpopulations.individuals;
	sample_inds = sample(all_inds, 100);
	phenotypes = sample_inds.tagF;
	writeFile("/mnt/Timina/dortega/vanorve/cluster/ordenado/scripts/directional/1/varNor/phenotypesFile_directional_h08_opt1_varNor_simulation_num_1_3" + ".txt", asString(phenotypes));
	sample_inds.genomes.outputVCF("/mnt/Timina/dortega/vanorve/cluster/ordenado/scripts/directional/1/varNor/vcfOutput_directional_h08_opt1_varNor_simulation_num_1_3" + ".txt", simplifyNucleotides=T);
}


100300 late() {
	all_inds = sim.subpopulations.individuals;
	sample_inds = sample(all_inds, 100);
	phenotypes = sample_inds.tagF;
	writeFile("/mnt/Timina/dortega/vanorve/cluster/ordenado/scripts/directional/1/varNor/phenotypesFile_directional_h08_opt1_varNor_simulation_num_1_4" + ".txt", asString(phenotypes));
	sample_inds.genomes.outputVCF("/mnt/Timina/dortega/vanorve/cluster/ordenado/scripts/directional/1/varNor/vcfOutput_directional_h08_opt1_varNor_simulation_num_1_4" + ".txt", simplifyNucleotides=T);
}


100400 late() {
	all_inds = sim.subpopulations.individuals;
	sample_inds = sample(all_inds, 100);
	phenotypes = sample_inds.tagF;
	writeFile("/mnt/Timina/dortega/vanorve/cluster/ordenado/scripts/directional/1/varNor/phenotypesFile_directional_h08_opt1_varNor_simulation_num_1_5" + ".txt", asString(phenotypes));
	sample_inds.genomes.outputVCF("/mnt/Timina/dortega/vanorve/cluster/ordenado/scripts/directional/1/varNor/vcfOutput_directional_h08_opt1_varNor_simulation_num_1_5" + ".txt", simplifyNucleotides=T);
}
