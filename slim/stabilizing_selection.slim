// QTL-based model assuming stabilizing selection
// QTL-based model: stabilizig selection
// Valeria AÃ±orve-Garibay
// SLiM version 4.1
// No scaling factor

initialize() {
	
	initializeMutationRate(1e-08);
	
	//defineConstant("path", "/mnt/Timina/dortega/vanorve/ancient-pheno-pred/output/stabilizing/total/0.5/");
	//defineConstant("path", "/mnt/Timina/dortega/vanorve/ancient-pheno-pred/output/stabilizing/total/1/");
	defineConstant("path", "/mnt/Timina/dortega/vanorve/ancient-pheno-pred/output/stabilizing/total/2/");

	catn("Stabilizing selection: " + "hsq = " + hsq + " VS = " + VS + "\n");
	
	// QTLs
	initializeMutationType("m1", 0.5, "f", 0.0); // neutral
	initializeMutationType("m2", 0.5, "n", 0.0, 0.25); // QTL
	m2.convertToSubstitution == F;
	
	initializeGenomicElementType("g1", c(m2), c(1));
	initializeGenomicElementType("g1", c(m1, m2), c(1, 0.01));

	// exons aka 20 independent genes
	rec_ends = NULL;
	rec_rates = NULL;
	for (index in 1:20){
		initializeGenomicElement(g1, (index - 1 )*25000 + 2, (index - 1 )*25000 + 24999 + 2);
		rec_ends = c( rec_ends, (index - 1)*25000 + 2);
		rec_ends = c( rec_ends, (index - 1)*25000 + 24999 + 2);
		rec_rates = c( rec_rates, 0.5);
		rec_rates = c( rec_rates, 1e-08*1);
	}
	initializeRecombinationRate(rec_rates, rec_ends);
}

// burn-in for ancestral population
1 late(){
	// save this run's identifier, used to save and restore
	defineConstant("simID", getSeed());
	sim.addSubpop("p1", 10000); }

1: late() {

	inds = sim.subpopulations.individuals;
	additive = inds.sumOfMutationsOfType(m2);
	// H2 = VA / VA + VE
	V_A = sd(additive)^2;
	V_E=(V_A-hsq*V_A)/hsq;
	env = rnorm(size(inds), 0.0, sqrt(V_E));
	pheno = additive + env;
	estimated_hsq = var(additive) / var(pheno);
	// stabilizing selection
	// based on w fitness equation defined by Kevin R. Thornton., 2019 and based on Burger (2000)
	inds.fitnessScaling = exp(-(((pheno - 0.0)^(2)) / (2)*(VS)));
	inds.tagF = pheno;

	if(sim.cycle == 100000 | sim.cycle == 100100 | sim.cycle == 100200 | sim.cycle == 100300 | sim.cycle == 100400)
	{
		catn(sim.cycle + ": mean pheno == " + mean(pheno) + ", hsq == " + estimated_hsq);
	}

}

mutationEffect(m2) { return 1.0; } // this call tells SLiM to ignore the selection coefficients of m2 mutations

100000:100400 late() {
	if(sim.cycle == 100000 | sim.cycle == 100100 | sim.cycle == 100200 | sim.cycle == 100300 | sim.cycle == 100400)
	{

		QTLs = sim.mutationsOfType(m2);
		f = sim.mutationFrequencies(NULL, QTLs);
		s = QTLs.selectionCoeff;
		p = QTLs.position;
		indices = order(f, F);
		lines = NULL;
		for (i in indices){
			mutLine = paste0(p[i], "\t", s[i], "\t", f[i], "\n");
			lines = c(lines, mutLine);
		}
		file = paste0(lines);
		file = "position\tselcoeff\tfreq\n" + file;
		writeFile(path + "QTLs_" + asString(sim.cycle) + "_" + nrun + ".txt", file);

		sample = sample(p1.individuals, 100);
		sample_pheno = sample.tagF;
		writeFile(path + "tpheno_" + asString(sim.cycle) + "_" + nrun + ".txt", asString(sample_pheno));
		sample.genomes.outputVCF(path + "outVCF_" + asString(sim.cycle) + "_" + nrun + ".vcf", simplifyNucleotides = T);
		sample.genomes.outputVCF(path + "noMultiallelicsVCF_" + asString(sim.cycle) + "_" + nrun + ".vcf", outputMultiallelics = F, simplifyNucleotides = T);
	}
}
